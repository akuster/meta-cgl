This README file contains information on the contents of the cgl layer.
Please see the corresponding sections below for details.


Dependencies
============

This layer depends on:

  URI: git://git.openembedded.org/bitbake
  branch: master

  URI: git://git.openembedded.org/openembedded-core
  layers: meta
  branch: master

  URI: git://git.yoctoproject.org/xxxx
  layers: xxxx
  branch: master


Patches
=======

Please submit any patches against the cgl layer to the
xxxx mailing list (xxxx@zzzz.org) and cc: the maintainer:

Maintainer: XXX YYYYYY <xxx.yyyyyy@zzzzz.com>



Table of Contents
=================

  I. Adding the cgl layer to your build
 II. Misc
III. Layer specific information
 IV. Specific terms and information


I. Adding the cgl layer to your build
=================================================

In order to use this layer, you need to make the build system aware of
it.

Assuming the cgl layer exists at the top-level of your
yocto build tree, you can add it to the build system by adding the
location of the cgl layer to bblayers.conf, along with any
other layers needed. Adapt the below list to proper format.

  BBLAYERS:

    meta
    meta-cgl
    meta-qt3
    meta-openembedded/meta-networking
    meta-openembedded/meta-filesystems
    meta-openembedded/meta-oe
    meta-openembedded/meta-perl
    meta-yocto
    meta-yocto-bsp
    meta-virtualization
    meta-openclovis
    meta-selinux
    meta-security
    meta-cloud-services/meta-openstack

A BBMASK definition is required because of some recipes duplicate existance:
    BBMASK = "meta-security/recipes-security/libcap-ng"


II. Misc
========

The meta-cgl layer tries to offer CGL compliant packages to be used for
a Linux distribution.


III. Layer specific information
==============================

The layer contains a core package group (packagegroup-cgl.bb) that
should aggregate all the other available package groups.
The recommandation is to group all CGL compliant features into specific
package groups.

An CGL compliant Linux image is also available into the layer. Its use
is to facilitate the development of a CGL compliant OS.
The core image name is: cgl-image-core.bb


IV. Specific terms and information
==================================

    HA(high availability) technology - refers to a system or component
that is continuously operational for a long length of time.
    Standard interface - represents a joint place of two systems or
subsystems that has a previously agreed  upon form so that two systems
may be readily connected together.
    Service interface - a programatic interface that tries to achive
interoperability. It enables users to describe independently of a platform
or programming language operations required in the application system at
a later stage.
    Interface - shared boundary or connection between two dissimilar
objects, devices or systems.
